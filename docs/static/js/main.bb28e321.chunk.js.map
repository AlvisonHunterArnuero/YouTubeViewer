{"version":3,"sources":["components/SearchBar.js","components/VideoItem.js","components/VideoList.js","components/VideoDetail.js","apis/youtube.js","components/App.js","serviceWorker.js","index.js"],"names":["SearchBar","state","term","onInputChange","event","setState","target","value","onFormSubmit","preventDefault","props","onTermSubmit","className","onSubmit","this","type","onChange","placeholder","React","Component","VideoItem","video","onVideoSelect","onClick","alt","snippet","channelTittle","src","thumbnails","medium","url","title","VideoList","videos","renderedList","map","index","key","VideoDetail","msgTitle","msgDescription","description","videoSrc","id","videoId","axios","create","baseURL","params","part","maxResults","App","selectedVideo","a","youtube","get","q","response","data","items","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bb28e321.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass SearchBar extends React.Component {\r\n  state = { term: \"\" };\r\n\r\n  onInputChange = event => {\r\n    this.setState({ term: event.target.value });\r\n  };\r\n\r\n  onFormSubmit = event => {\r\n    event.preventDefault();\r\n    this.props.onTermSubmit(this.state.term);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n<div className=\"jumbotron col-lg-12\">\r\n  <h1 className=\"display-4\">Yet another YouTube Search Tool </h1>\r\n  <p className=\"lead\">This is a simple app based on a practice project for a <b>Stephen Grider Udemy course</b> I am currently taking based on The\r\n  React library and that is called <b className=\"text-primary\"> React.js - The Complete Guide (including Hooks, React Router, Redux).</b> This was initially intended to be layed out using the Semantic UI library but I decided to use Bootstrap 4 instead since \r\n  I feel more confortable working with it. I also changed the look and feel as well as the layout of the original version.</p>\r\n  <small className=\"text-dark\">NOTE: If you don't see any rendering on the screen is because my YouTube API key gets expired every certain limit, hence I shall have to change it regulary.</small>\r\n\r\n  <form onSubmit={this.onFormSubmit}>\r\n  <div className=\"form-group\">\r\n  <input type=\"text\" onChange={this.onInputChange} value={this.state.term} placeholder=\"Type your search term here...\" className=\"mt-2 form-control form-control-lg\"/>\r\n  <input type=\"submit\" className=\"mt-2 btn text-white bg-primary\" value=\"Fetch It!\" />\r\n  </div>\r\n</form>\r\n</div>\r\n    );\r\n  }\r\n}\r\nexport default SearchBar;\r\n","import React from \"react\";\r\nimport \"./VideoItem.css\";\r\n\r\nconst VideoItem = ({ video, onVideoSelect }) => {\r\n  return (\r\n    <div onClick={() => onVideoSelect(video)} className=\"video-item card m-4 border border-gray\">\r\n      <img\r\n        className=\"card-img-top\"\r\n        alt={video.snippet.channelTittle}\r\n        src={video.snippet.thumbnails.medium.url}\r\n      />\r\n      <div className=\"card-body\">\r\n        <p className=\"card-text titulo\">{video.snippet.title}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VideoItem;\r\n","import React from \"react\";\r\nimport VideoItem from \"./VideoItem\";\r\n\r\nconst VideoList = ({ videos, onVideoSelect }) => {\r\n  const renderedList = videos.map((video, index) => {\r\n    return (\r\n   <div key={index} className=\"col-sm-12 col-md-6 col-lg-4 col-xl-3\">\r\n      <VideoItem\r\n        onVideoSelect={onVideoSelect}\r\n        video={video}\r\n      />\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (<div className=\"row\">{renderedList}</div>);\r\n};\r\nexport default VideoList;\r\n","import React from \"react\";\r\n\r\nconst VideoDetail = ({ video }) => {\r\n  let msgTitle = !video ? \"Please type in your search criteria\" : <b className=\"text-uppercase\">You are now watching: {video.snippet.title}</b>;\r\n  let msgDescription = !video ? \"Video Description will appear here upon video selection process.\": <h6>{video.snippet.description}</h6>;\r\n\r\n  const videoSrc = !video\r\n    ? \"\"\r\n    : `https://www.youtube.com/embed/${video.id.videoId}`;\r\n  return (<>\r\n  <div className=\"embed-responsive embed-responsive-16by9\">\r\n<iframe className=\"embed-responsive-item\" title={msgTitle} src={videoSrc} />\r\n</div>\r\n<div className=\"col-12 p-3 mb-2 bg-info text-white\"><b>{msgTitle}</b>\r\n{msgDescription}</div>\r\n</>\r\n  );\r\n};\r\n\r\nexport default VideoDetail;\r\n","import axios from \"axios\";\r\nconst KEY = \"AIzaSyDGliRnvpo8pxH7_DR5VcTgCRVBzSjGfFc\";\r\nexport default axios.create({\r\n  baseURL: \"https://www.googleapis.com/youtube/v3\",\r\n  params: {\r\n    part: \"snippet\",\r\n    maxResults: 8,\r\n    type:\"video\",\r\n    key: KEY\r\n  }\r\n});\r\n","import React from \"react\";\r\nimport SearchBar from \"./SearchBar\";\r\nimport VideoList from \"./VideoList\";\r\nimport VideoDetail from \"./VideoDetail\";\r\nimport youtube from \"../apis/youtube\";\r\n\r\nclass App extends React.Component {\r\n  state = { videos: [], selectedVideo: null };\r\n\r\n  componentDidMount() {\r\n    this.onTermSubmit(\"React.js Tutorials 2019\");\r\n  }\r\n  onTermSubmit = async term => {\r\n    const response = await youtube.get(\"/search\", {\r\n      params: {\r\n        q: term\r\n      }\r\n    });\r\n    this.setState({\r\n      videos: response.data.items,\r\n      selectedVideo: response.data.items[0]\r\n    });\r\n  };\r\n\r\n  onVideoSelect = video => {\r\n    this.setState({ selectedVideo: video });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row\">\r\n          <SearchBar onTermSubmit={this.onTermSubmit} />\r\n        </div>\r\n        <div className=\"row\">\r\n          <VideoList\r\n            onVideoSelect={this.onVideoSelect}\r\n            videos={this.state.videos}\r\n          />\r\n        </div>\r\n        <div className=\"row mp-4 mb-2\">\r\n        <hr/>\r\n          <VideoDetail video={this.state.selectedVideo} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}