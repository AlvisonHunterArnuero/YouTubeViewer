{"version":3,"sources":["components/SearchBar.js","components/VideoItem.js","components/VideoList.js","components/VideoDetail.js","apis/youtube.js","components/App.js","serviceWorker.js","index.js"],"names":["SearchBar","state","term","onInputChange","event","setState","target","value","onFormSubmit","preventDefault","props","onTermSubmit","className","onSubmit","this","type","onChange","placeholder","React","Component","VideoItem","video","onVideoSelect","onClick","alt","snippet","channelTittle","src","thumbnails","medium","url","title","VideoList","videos","renderedList","map","key","id","videoId","VideoDetail","msgTitle","msgDescription","description","videoSrc","axios","create","baseURL","params","part","maxResults","App","selectedVideo","a","youtube","get","q","response","data","items","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9ff04a9f.chunk.js","sourcesContent":["import React from \"react\";\n\nclass SearchBar extends React.Component {\n  state = { term: \"\" };\n\n  onInputChange = event => {\n    this.setState({ term: event.target.value });\n  };\n\n  onFormSubmit = event => {\n    event.preventDefault();\n    this.props.onTermSubmit(this.state.term);\n  };\n\n  render() {\n    return (\n<div className=\"jumbotron col-lg-12\">\n  <h1 className=\"display-4\">Yet another YouTube Search Tool </h1>\n  <p className=\"lead\">This is a simple app based on a practice project for a <b>Stephen Grider Udemy course</b> I am currently taking based on The\n  React library and that is called <b className=\"text-primary\"> React.js - The Complete Guide (including Hooks, React Router, Redux).</b> This was initially intended to be layed out using the Semantic UI library but I decided to use Bootstrap 4 instead since \n  I feel more confortable working with it. I also changed the look and feel as well as the layout of the original verion.</p>\n\n  <form onSubmit={this.onFormSubmit}>\n  <div className=\"form-group\">\n  <input type=\"text\" onChange={this.onInputChange} value={this.state.term} placeholder=\"Type your search term here...\" className=\"form-control form-control-lg\"/>\n  </div>\n</form>\n</div>\n    );\n  }\n}\nexport default SearchBar;\n","import React from \"react\";\nimport \"./VideoItem.css\";\n\nconst VideoItem = ({ video, onVideoSelect }) => {\n  return (\n    <div onClick={() => onVideoSelect(video)} className=\"video-item card m-4 border border-gray\">\n      <img\n        className=\"card-img-top\"\n        alt={video.snippet.channelTittle}\n        src={video.snippet.thumbnails.medium.url}\n      />\n      <div className=\"card-body\">\n        <p className=\"card-text titulo\">{video.snippet.title}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default VideoItem;\n","import React from \"react\";\nimport VideoItem from \"./VideoItem\";\n\nconst VideoList = ({ videos, onVideoSelect }) => {\n  const renderedList = videos.map(video => {\n    return (\n   <div className=\"col-sm-12 col-md-6 col-lg-4 col-xl-3\">\n      <VideoItem\n        key={video.id.videoId}\n        onVideoSelect={onVideoSelect}\n        video={video}\n      />\n      </div>\n    );\n  });\n\n  return (<div className=\"row\">{renderedList}</div>);\n};\nexport default VideoList;\n","import React from \"react\";\n\nconst VideoDetail = ({ video }) => {\n  let msgTitle = !video ? \"Please type in your search criteria\" : <b className=\"text-uppercase\">You are now watching: {video.snippet.title}</b>;\n  let msgDescription = !video ? \"Video Description will appear here upon video selection process.\": <h6>{video.snippet.description}</h6>;\n\n  const videoSrc = !video\n    ? \"\"\n    : `https://www.youtube.com/embed/${video.id.videoId}`;\n  return (<>\n  <div className=\"embed-responsive embed-responsive-16by9\">\n<iframe className=\"embed-responsive-item\" title={msgTitle} src={videoSrc} />\n</div>\n<div className=\"col-12 p-3 mb-2 bg-info text-white\"><b>{msgTitle}</b>\n{msgDescription}</div>\n</>\n  );\n};\n\nexport default VideoDetail;\n","import axios from \"axios\";\nconst KEY = \"AIzaSyDpE1u9y4u_zeNzL2hxvif6rJxCmBHlxqI\";\nexport default axios.create({\n  baseURL: \"https://www.googleapis.com/youtube/v3\",\n  params: {\n    part: \"snippet\",\n    maxResults: 8,\n    type:\"video\",\n    key: KEY\n  }\n});\n","import React from \"react\";\nimport SearchBar from \"./SearchBar\";\nimport VideoList from \"./VideoList\";\nimport VideoDetail from \"./VideoDetail\";\nimport youtube from \"../apis/youtube\";\n\nclass App extends React.Component {\n  state = { videos: [], selectedVideo: null };\n\n  componentDidMount() {\n    this.onTermSubmit(\"React.js Tutorials 2019\");\n  }\n  onTermSubmit = async term => {\n    const response = await youtube.get(\"/search\", {\n      params: {\n        q: term\n      }\n    });\n    this.setState({\n      videos: response.data.items,\n      selectedVideo: response.data.items[0]\n    });\n  };\n\n  onVideoSelect = video => {\n    this.setState({ selectedVideo: video });\n  };\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <SearchBar onTermSubmit={this.onTermSubmit} />\n        </div>\n        <div className=\"row\">\n          <VideoList\n            onVideoSelect={this.onVideoSelect}\n            videos={this.state.videos}\n          />\n        </div>\n        <div className=\"row mp-4 mb-2\">\n        <hr/>\n          <VideoDetail video={this.state.selectedVideo} />\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}